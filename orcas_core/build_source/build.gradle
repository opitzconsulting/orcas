subprojects 
{
  project.ext.xtext_version = "2.6.1"

  project.group = "com.opitzconsulting.orcas"
  project.version = "7.8.6"  

  repositories 
  {
    mavenCentral()
    mavenLocal()
  }

  if( getRootProject().hasProperty('orcas_tmp_folder') )
  {
    project.ext.tmp_folder = getRootProject().orcas_tmp_folder
  }
  else
  {
    project.ext.tmp_folder = '../.gradle'
  }

  if( getRootProject().hasProperty('orcas_extension_folder') && !getRootProject().orcas_extension_folder.equals( "" ) )
  {
    project.ext.extension_folder = getRootProject().orcas_extension_folder
  }
  else
  {
    project.ext.extension_folder = project.ext.tmp_folder + "/empty_extensions"
    project.file(project.ext.extension_folder).mkdirs()
  }

  if( getRootProject().hasProperty('orcas_extension_extract_file') && !getRootProject().orcas_extension_extract_file.equals( "" ) )
  {
    project.ext.extension_extract_file = getRootProject().orcas_extension_extract_file
  }
  else
  {
    project.ext.extension_extract_file = null
  }

  if( getRootProject().hasProperty('orcas_prebuild_version') && !getRootProject().orcas_prebuild_version.equals( "" ) )
  {
    project.ext.prebuildorcasversion = getRootProject().orcas_prebuild_version
  }
  else
  {
    project.ext.prebuildorcasversion = null
  }

  if( getRootProject().hasProperty('extensionname_internal') )
  {
    project.ext.extensionname_internal = getRootProject().extensionname_internal + "-"
  }
  else
  {
    project.ext.extensionname_internal = ""
  }

  if( getRootProject().hasProperty('extension_artifact_id_prefix') )
  {
    project.ext.extensionname_external = getRootProject().extension_artifact_id_prefix + "-"
    project.ext.extensiongroup = getRootProject().extension_artifact_group
    project.ext.extensionversion = getRootProject().extension_artifact_version
    project.ext.externalextension = true
  }
  else
  {
    project.ext.extensionname_external = ""
    project.ext.extensiongroup = project.group
    project.ext.extensionversion = project.version
    project.ext.externalextension = false
  }

  project.buildDir = project.ext.tmp_folder + "/" + project.path.replaceAll( ":", "_" )

      tasks.withType(JavaCompile.class) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}


if( JavaVersion.current().isJava8Compatible() ) 
{
  allprojects 
  {
    tasks.withType(Javadoc) 
    {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

